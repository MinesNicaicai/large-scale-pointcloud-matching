// #include <dirent.h>
#include <fstream>
#include <string>
#include <vector>

#include <boost/filesystem.hpp>
// #include <pcl/filters/random_sample.h>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>

#include "utility.hpp"


using PointT = pcl::PointXYZ;

int main(int argc, char** argv)
{
    if (argc != 3) {
        std::cout << "Description: convert segments.csv generated by segmatch to pcds" << std::endl
                  << "usage: ./segmatch_to_pcds <segments.csv> <output-dir>\n";

        return 0;
    }

    std::ifstream segments_file(argv[1]);

    boost::filesystem::path dir_path(argv[2]);

    if (!segments_file.is_open()) {
        std::cerr << "Failed to open segments file: " << argv[1] << std::endl;

        return -1;
    }


    int segment_id = -1;
    pcl::PointCloud<PointT>::Ptr segment_cloud(new pcl::PointCloud<PointT>());
    pcl::PCDWriter writer;

    if (!segments_file.eof()) {
        std::string line;
        std::getline(segments_file, line);
        if (!line.empty()) {
            std::vector<std::string> splitted = split(line, " ");
            segment_id = atoi(splitted[0].c_str());
            segment_cloud->points.push_back({(float)atof(splitted[1].c_str()),
                                             (float)atof(splitted[2].c_str()),
                                             (float)atof(splitted[3].c_str())});
        }
    }
    while (!segments_file.eof()) {
        // std::cout << "do sth" << std::endl;
        std::string line;
        std::getline(segments_file, line);

        if (line.empty())
            break;
        std::vector<std::string> splitted = split(line, " ");
        if (segment_id != atoi(splitted[0].c_str())) {
            if (segment_cloud->empty())
                continue;

            std::string out_pcd_name = (dir_path / ("segment_" + std::to_string(segment_id) + ".pcd")).c_str();
            segment_cloud->width = segment_cloud->size();
            segment_cloud->height = 1;
            segment_cloud->is_dense = true;
            writer.write<PointT>(out_pcd_name, *segment_cloud, false);

            segment_id = atoi(splitted[0].c_str());
            segment_cloud.reset(new pcl::PointCloud<PointT>());
        } else {
            segment_cloud->points.push_back({(float)atof(splitted[1].c_str()),
                                             (float)atof(splitted[2].c_str()),
                                             (float)atof(splitted[3].c_str())});
        }
    }

    return 0;
}